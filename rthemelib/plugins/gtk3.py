import rthemelib.plugin_manager as pm
import rthemelib.theme_classes as tc
import os

import gi
gi.require_version("Gio", "2.0")
from gi.repository import Gio

interface_settings = Gio.Settings.new("org.gnome.desktop.interface")

HOME_ = os.path.expanduser('~')
CSS_FILE_ = f"{HOME_}/.config/gtk-3.0/gtk.css"
CSS_DIR_ = f"{HOME_}/.config/gtk-3.0/"


class Plugin(pm.Plugin):
    name = "gtk3"
    description = "A plugin for GTK3 themes. Requires adw-gtk3"
    version = "0.1"
    author = "PizzaLovingNerd"
    plugin_properties = ["custom_css"]

    def __init__(self, plugin_manager: pm.PluginManager):
        super().__init__(plugin_manager)

    def on_load(self):  # Runs when the plugin is loaded
        print("GTK3 Plugin Loaded")

    def purge_theme(self):  # Purges the theme.
        if os.path.exists(CSS_FILE_):
            os.remove(CSS_FILE_)

    def apply_theme(self, subvariant: tc.Subvariant):  # Ran when applying a theme.
        self.purge_theme()

        # Apply adw-gtk3 to light or dark mode
        if interface_settings.get_string("color-scheme") == "prefer-dark":
            interface_settings.set_string("gtk-theme", "adw-gtk3-dark")
        else:
            interface_settings.set_string("gtk-theme", "adw-gtk3")

        if not os.path.exists(CSS_DIR_):
            os.mkdir(CSS_DIR_)

        lines = [
            "/* AUTOGENERATED BY RTHEME, DO NOT EDIT WITHOUT RUNNING \"rthemed disable\"",
            "OTHERWISE IT MAY BE OVERWRITTEN BY RTHEMED */", ""
        ]

        theme_properties = subvariant.properties.items()
        if "gtk_accent_only" in subvariant.parent_variant.theme.theme_flags:
            theme_properties_original = theme_properties
            theme_properties = {}
            if "accent_color" in theme_properties_original:
                theme_properties["accent_color"] = theme_properties_original["accent_color"]
            if "accent_bg_color" in theme_properties_original:
                theme_properties["accent_bg_color"] = theme_properties_original["accent_bg_color"]

        for items in theme_properties:
            lines.append(f"@define-color {items[0]} {items[1]};")
        if "gtk3" in subvariant.plugin_properties:
            lines.append("")
            lines.append("/* Custom CSS */")
            for item in subvariant.plugin_properties["gtk3"]["custom_css"].splitlines():
                lines.append(item)
            lines.append("")
        for line in lines:
            with open(CSS_FILE_, "a") as f:
                f.write(f"{line}\n")
        print("GTK3 theme applied.")