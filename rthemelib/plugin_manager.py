import glob
import importlib
import site

from pathlib import Path
import rthemelib.theme_classes as tc

import gi
gi.require_version("Gio", "2.0")
from gi.repository import Gio

SITE_DIRS = site.getsitepackages()


class PluginManager:
    def __init__(self):
        self.plugins = []
        settings = Gio.Settings.new("io.risi.rtheme")
        self.enabled_plugins = settings.get_strv("enabled-plugins")
        self.load_plugins()

    def load_plugins(self):
        plugin_dirs = [x for x in SITE_DIRS if (Path(x) / "rthemelib" / "plugins").is_dir()]
        for directory in plugin_dirs:
            plugin_path = Path(directory) / "rthemelib" / "plugins"
            for plugin in plugin_path.glob("*.py"):
                plugin_name = plugin.stem
                if plugin_name in self.enabled_plugins:
                    plugin_module = importlib.import_module(f"rthemelib.plugins.{plugin_name}")
                    plugin = plugin_module.Plugin(self)
                    plugin.on_load()
                    self.plugins.append(plugin)
            for possible_plugin in plugin_path.iterdir():
                if (possible_plugin / "__main__.py").is_file():
                    if possible_plugin.name in self.enabled_plugins:
                        print(possible_plugin.name, self.enabled_plugins)
                        plugin_module = importlib.import_module(
                            f"rthemelib.plugins.{possible_plugin.name}.__main__"
                        )
                        plugin = plugin_module.Plugin(self)
                        plugin.on_load()
                        self.plugins.append(plugin)

    def get_plugins(self):
        return self.plugins


class Plugin:
    def __init__(self, plugin_manager: PluginManager):
        self.name = ""
        self.description = ""
        self.version = ""
        self.author = ""
        self.plugin_properties = []
        self.plugin_manager = plugin_manager

    def on_load(self):
        """Runs when the plugin is loaded."""
        pass

    def pre_apply(self):
        """Ran before applying a theme. This is useful for plugins that need to
        edit the theme before it is applied."""
        pass

    def purge_theme(self):
        """Removes any theming files generated by the plugin.
        We recommend using this function when removing the plugin and
        when applying a theme to prevent any errors when reapplying the theme."""
        pass

    def apply_theme(self, subvariant: tc.Subvariant):  # Ran when applying a theme.
        pass


def get_plugins():
    plugin_manager = PluginManager()
    return plugin_manager.get_plugins()


def get_available_plugins():
    plugins = []
    plugin_dirs = [x for x in SITE_DIRS if (Path(x) / "rthemelib" / "plugins").is_dir()]
    for directory in plugin_dirs:
        plugin_path = Path(directory) / "rthemelib" / "plugins"
        for plugin in plugin_path.glob("*.py"):
            plugin_name = plugin.stem
            plugins.append(plugin)
        for possible_plugin in plugin_path.iterdir():
            if (possible_plugin / "__main__.py").is_file():
                plugins.append(possible_plugin.name)