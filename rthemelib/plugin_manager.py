import glob
import importlib
import os
import site

import rthemelib
import rthemelib.theme_classes as tc

SITE_DIRS = site.getsitepackages()


class PluginManager:
    def __init__(self):
        self.plugins = []
        self.load_plugins()

    def load_plugins(self):
        for directory in [x for x in SITE_DIRS if os.path.isdir(f"{x}/rthemelib/plugins")]:
            for plugin in glob.glob(os.path.join(directory, "rthemelib/plugins/*.py")):
                plugin = os.path.basename(plugin)
                plugin_module = importlib.import_module(f"rthemelib.plugins.{plugin[:-3]}")
                plugin = plugin_module.Plugin(self)
                plugin.on_load()
                self.plugins.append(plugin)
            for possible_plugin in os.walk(os.path.join(directory, "rthemelib/plugins")):
                if "__init__.py" in possible_plugin[2]:
                    print(f"Loaded plugin {plugin.name}")
                    plugin_module = importlib.import_module(
                        f"rthemelib.plugins.{possible_plugin[0].split('/')[-1]}.__main__"
                    )
                    plugin = plugin_module.Plugin(self)
                    plugin.on_load()
                    print(f"Loaded plugin {plugin.name}")
                    self.plugins.append(plugin)

    def get_plugins(self):
        return self.plugins


class Plugin:
    def __init__(self, plugin_manager: PluginManager):
        self.name = ""
        self.description = ""
        self.version = ""
        self.author = ""
        self.plugin_properties = []
        self.plugin_manager = plugin_manager

    def on_load(self):
        """Runs when the plugin is loaded."""
        pass

    def pre_apply(self):
        """Ran before applying a theme. This is useful for plugins that need to
        edit the theme before it is applied."""
        pass

    def purge_theme(self):
        """Removes any theming files generated by the plugin.
        We recommend using this function when removing the plugin and
        when applying a theme to prevent any errors when reapplying the theme."""
        pass

    def apply_theme(self, subvariant: tc.Subvariant):  # Ran when applying a theme.
        pass


def get_plugins():
    plugin_manager = PluginManager()
    return plugin_manager.get_plugins()